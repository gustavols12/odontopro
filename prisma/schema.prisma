
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment{
    id String @id @default(uuid())
    name String
    email String
    phone String
    appointmentDate DateTime
    time String

    serviceId String
    service Service @relation(fields: [serviceId],references: [id])

    userId String
    user User @relation(fields: [userId],references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

	@@map("Appointments")
}

model Reminder{
    id String @id @default(uuid())
    description String

    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user User @relation(fields: [userId],references: [id])

}

model Service{
    id String @id @default(uuid())
    name String
    price Int
    duration Int
    status Boolean @default(true)

    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user User @relation(fields: [userId],references: [id])
    appoiment Appointment[]

}

enum Plan {
  BASIC
  PROFESSIONAL
}

model Subscription{
  id String @id @default(uuid())
  status String
  plan Plan
  priceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user User @relation(fields: [userId],references: [id])
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  address String? @default("")
  phone String? @default("")
  status Boolean @default(true)
  times String[]@default([])
  timeZone String?
  stripe_customer_id String?


  subscription Subscription?
  services Service[]
  reminders Reminder[]
  appointment Appointment[]

  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]


 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}